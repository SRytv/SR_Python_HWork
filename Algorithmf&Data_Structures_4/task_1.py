#1. Проанализировать скорость и сложность одного - трёх любых алгоритмов,
# разработанных в рамках домашнего задания первых трех уроков.
# Данная программа была составлена специально для донного задания
#
import sys

def fact_recurs(N):
    if N == 1:
        return 1
    return fact_recurs(N-1)*N

def fact_memo(N):
    memo_facts = [1,2,6,24,120,720,0,0,0,0,0,0,0,0,0,0,0,0,] + [0]*500
    if memo_facts[N]  == 0:
        memo_facts[N] = fact_memo(N-1)*N
    return memo_facts[N]

def fact_loop(N):
    f = 1
    for i in range(1, N+1):
        f *=i
    return f

do = {
    "r": fact_recurs,
    "m": fact_memo,
    "l": fact_loop,
}

try:
    N_factor = int(sys.argv[2])
except IndexError:
    file_dir_name = None

try:
    key = sys.argv[1]
except IndexError:
    key = None


if key:
    if do.get(key):
        print(do[key](N_factor))

#============================================================================================================
# вычисление 500! рекурсивной функцией
#C:\Users\Serg_\PycharmProjects\Algorithms&Data_Structures\Lesson_4>python -m cProfile -s time task_1.py r 500
#122013682599111006870123878542304692625357434280319284219241358838584537315388199760549644750220328186301361647714820358416337872207817720
#048078520515932928547790757193933060377296085908627042917454788242491272634430567017327076946106280231045264421887878946575477714986349436
#778103764427403382736539747138647787849543848959553753799042324106127132698432774571554630997720278101456108118837370953101635632443298702
#956389662891165897476957208792692887128178007026517450776841071962439039432253642260523494585012991857150124870696156814162535905669342381
#300885624924689156412677565448188650659384795177536089400574523894033579847636394490531306232374906644504882466507594673586207463792518420
#045936969298102226397195259719094521782333175693458150855233282076282002340262690789834245171200620771464097945611612762914595123722991334
#016955236385094288559201872743379517301458635757082835578015873543276888868012039988238470215146760544540766353598417443048012893831389688
#163948746965881750450692636533817505547812864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#0000000000000000000000000000000
#         509 function calls (10 primitive calls) in 0.001 seconds
#
#   Ordered by: internal time
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#    500/1    0.001    0.000    0.001    0.001 task_1.py:3(fact_recurs)
#        1    0.000    0.000    0.000    0.000 {built-in method print}
#        2    0.000    0.000    0.000    0.000 {built-in method charmap_encode}
#        1    0.000    0.000    0.001    0.001 task_1.py:1(<module>)
#        2    0.000    0.000    0.000    0.000 cp866.py:18(encode)
#        1    0.000    0.000    0.001    0.001 {built-in method exec}
#        1    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
#        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#
#============================================================================================================
# вычисление 500! рекурсивной функцией с меморизацией
#C:\Users\Serg_\PycharmProjects\Algorithms&Data_Structures\Lesson_4>python -m cProfile -s time task_1.py r 500
#122013682599111006870123878542304692625357434280319284219241358838584537315388199760549644750220328186301361647714820358416337872207817720
#048078520515932928547790757193933060377296085908627042917454788242491272634430567017327076946106280231045264421887878946575477714986349436
#778103764427403382736539747138647787849543848959553753799042324106127132698432774571554630997720278101456108118837370953101635632443298702
#956389662891165897476957208792692887128178007026517450776841071962439039432253642260523494585012991857150124870696156814162535905669342381
#300885624924689156412677565448188650659384795177536089400574523894033579847636394490531306232374906644504882466507594673586207463792518420
#045936969298102226397195259719094521782333175693458150855233282076282002340262690789834245171200620771464097945611612762914595123722991334
#016955236385094288559201872743379517301458635757082835578015873543276888868012039988238470215146760544540766353598417443048012893831389688
#163948746965881750450692636533817505547812864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#0000000000000000000000000000000
#         509 function calls (10 primitive calls) in 0.001 seconds
#
#   Ordered by: internal time
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#    500/1    0.001    0.000    0.001    0.001 task_1.py:3(fact_recurs)
#        1    0.000    0.000    0.000    0.000 {built-in method print}
#        2    0.000    0.000    0.000    0.000 {built-in method charmap_encode}
#        1    0.000    0.000    0.001    0.001 task_1.py:1(<module>)
#        2    0.000    0.000    0.000    0.000 cp866.py:18(encode)
#        1    0.000    0.000    0.001    0.001 {built-in method exec}
#        1    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
#        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#
#============================================================================================================
# вычисление 20! рекурсивной функцией с циклом
#C:\Users\Serg_\PycharmProjects\Algorithms&Data_Structures\Lesson_4>python -m cProfile -s time task_1.py l 20
#2432902008176640000
#         10 function calls in 0.000 seconds
#
#   Ordered by: internal time
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#        1    0.000    0.000    0.000    0.000 {built-in method print}
#        1    0.000    0.000    0.000    0.000 task_1.py:1(<module>)
#        1    0.000    0.000    0.000    0.000 task_1.py:14(fact_loop)
#        2    0.000    0.000    0.000    0.000 {built-in method charmap_encode}
#        2    0.000    0.000    0.000    0.000 cp866.py:18(encode)
#        1    0.000    0.000    0.000    0.000 {built-in method exec}
#        1    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
#        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#
#============================================================================================================
#  вычисление 500! рекурсивной функцией с циклом выполнить не удалось из-за постоянно возникавшей ошибки:
#C:\Users\Serg_\PycharmProjects\Algorithms&Data_Structures\Lesson_4>python -m cProfile -s time task_1.py l 500
#Traceback (most recent call last):
#  File "C:\Temp\Portable Python 3.2.5.1\App\lib\runpy.py", line 161, in _run_module_as_main
#    "__main__", fname, loader, pkg_name)
#  File "C:\Temp\Portable Python 3.2.5.1\App\lib\runpy.py", line 74, in _run_code
#    exec(code, run_globals)
#  File "C:\Temp\Portable Python 3.2.5.1\App\lib\cProfile.py", line 195, in <module>
#    main()
#  File "C:\Temp\Portable Python 3.2.5.1\App\lib\cProfile.py", line 181, in main
#    code = compile(fp.read(), progname, 'exec')
#  File "task_1.py", line 113
#SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 3-4: truncated \UXXXXXXXX escape
#============================================================================================================
#
#Оценить сложность по результатам выполненых измеренрий не представляется возможным,
# слищком грубым оказался инструмент...
#
